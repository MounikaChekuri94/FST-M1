Statement 1
UPDATE salesman SET grade=200 WHERE salesman_city='Rome'
ORA-00942: table or view does not exist
Statement 2
CREATE TABLE salesman ( 
    salesman_id int, 
    salesman_name varchar2(32), 
    salesman_city varchar2(32), 
    commission int 
)
Table created.
Statement 3
DESCRIBE salesman
TABLE SALESMAN
Column	Null?	Type
SALESMAN_ID	-	NUMBER
SALESMAN_NAME	-	VARCHAR2(32)
SALESMAN_CITY	-	VARCHAR2(32)
COMMISSION	-	NUMBER
Download CSV
4 rows selected.
Statement 4
INSERT INTO salesman VALUES(5002, 'Nail Knite', 'Paris', 13)
1 row(s) inserted.
Statement 5
INSERT ALL 
    INTO salesman VALUES(5005, 'Pit Alex', 'London', 11) 
    INTO salesman VALUES(5006, 'McLyon', 'Paris', 14) 
    INTO salesman VALUES(5007, 'Paul Adam', 'Rome', 13) 
    INTO salesman VALUES(5003, 'Lauson Hen', 'San Jose', 12) 
SELECT 1 FROM DUAL
4 row(s) inserted.
Statement 6
SELECT * FROM salesman
SALESMAN_ID	SALESMAN_NAME	SALESMAN_CITY	COMMISSION
5002	Nail Knite	Paris	13
5005	Pit Alex	London	11
5006	McLyon	Paris	14
5007	Paul Adam	Rome	13
5003	Lauson Hen	San Jose	12
Download CSV
5 rows selected.
Statement 7
SELECT salesman_id, salesman_city FROM salesman
SALESMAN_ID	SALESMAN_CITY
5002	Paris
5005	London
5006	Paris
5007	Rome
5003	San Jose
Download CSV
5 rows selected.
Statement 8
SELECT * FROM salesman WHERE salesman_city='Paris'
SALESMAN_ID	SALESMAN_NAME	SALESMAN_CITY	COMMISSION
5002	Nail Knite	Paris	13
5006	McLyon	Paris	14
Download CSV
2 rows selected.
Statement 9
SELECT salesman_id, commission FROM salesman WHERE salesman_name='Paul Adam'
SALESMAN_ID	COMMISSION
5007	13
Download CSV
Statement 10
ALTER TABLE salesman ADD grade int
Table altered.
Statement 11
UPDATE salesman SET grade=100
5 row(s) updated.
Statement 12
SELECT * FROM salesman
SALESMAN_ID	SALESMAN_NAME	SALESMAN_CITY	COMMISSION	GRADE
5002	Nail Knite	Paris	13	100
5005	Pit Alex	London	11	100
5006	McLyon	Paris	14	100
5007	Paul Adam	Rome	13	100
5003	Lauson Hen	San Jose	12	100
Download CSV
5 rows selected.
Statement 13
UPDATE salesman SET grade=200 WHERE salesman_city='Rome'
1 row(s) updated.
Statement 14
CREATE TABLE salesman (  
    salesman_id int,  
    salesman_name varchar2(32),  
    salesman_city varchar2(32),  
    commission int  
)
ORA-00955: name is already used by an existing object
Statement 15
select * from salesman
SALESMAN_ID	SALESMAN_NAME	SALESMAN_CITY	COMMISSION	GRADE
5002	Nail Knite	Paris	13	100
5005	Pit Alex	London	11	100
5006	McLyon	Paris	14	100
5007	Paul Adam	Rome	13	200
5003	Lauson Hen	San Jose	12	100
Download CSV
5 rows selected.
Statement 16
UPDATE salesman SET grade=200 WHERE salesman_city='Rome'
1 row(s) updated.
Statement 17
UPDATE salesman SET grade=300 WHERE salesman_name='James Hoog'
0 row(s) updated.
Statement 18
select * from salesman
SALESMAN_ID	SALESMAN_NAME	SALESMAN_CITY	COMMISSION	GRADE
5002	Nail Knite	Paris	13	100
5005	Pit Alex	London	11	100
5006	McLyon	Paris	14	100
5007	Paul Adam	Rome	13	200
5003	Lauson Hen	San Jose	12	100
Download CSV
5 rows selected.
Statement 19
UPDATE salesman SET salesman_name='Pierre' WHERE salesman_name='McLyon'
1 row(s) updated.
Statement 20
create table orders( 
    order_no int primary key, purchase_amount float, order_date date, 
    customer_id int, salesman_id int)
Table created.
Statement 21
INSERT ALL 
    INTO orders VALUES(70001, 150.5, TO_DATE('2012/10/05', 'YYYY/MM/DD'), 3005, 5002)  
    INTO orders VALUES(70009, 270.65, TO_DATE('2012/09/10', 'YYYY/MM/DD'), 3001, 5005) 
    INTO orders VALUES(70002, 65.26, TO_DATE('2012/10/05', 'YYYY/MM/DD'), 3002, 5001) 
    INTO orders VALUES(70004, 110.5, TO_DATE('2012/08/17', 'YYYY/MM/DD'), 3009, 5003) 
    INTO orders VALUES(70007, 948.5, TO_DATE('2012/09/10', 'YYYY/MM/DD'), 3005, 5002) 
    INTO orders VALUES(70005, 2400.6, TO_DATE('2012/07/27', 'YYYY/MM/DD'), 3007, 5001) 
    INTO orders VALUES(70008, 5760, TO_DATE('2012/08/15', 'YYYY/MM/DD'), 3002, 5001) 
    INTO orders VALUES(70010, 1983.43, TO_DATE('2012/10/10', 'YYYY/MM/DD'), 3004, 5006) 
    INTO orders VALUES(70003, 2480.4, TO_DATE('2012/10/10', 'YYYY/MM/DD'), 3009, 5003) 
    INTO orders VALUES(70012, 250.45, TO_DATE('2012/06/27', 'YYYY/MM/DD'), 3008, 5002) 
    INTO orders VALUES(70011, 75.29, TO_DATE('2012/08/17', 'YYYY/MM/DD'), 3003, 5007) 
    INTO orders VALUES(70013, 3045.6, TO_DATE('2012/04/25', 'YYYY/MM/DD'), 3002, 5001) 
SELECT 1 FROM DUAL
12 row(s) inserted.
Statement 22
select distinct salesman_id from orders
SALESMAN_ID
5001
5003
5006
5007
5005
5002
Download CSV
6 rows selected.
Statement 23
select order_no, order_date from orders order by order_date
ORDER_NO	ORDER_DATE
70013	25-APR-12
70012	27-JUN-12
70005	27-JUL-12
70008	15-AUG-12
70011	17-AUG-12
70004	17-AUG-12
70007	10-SEP-12
70009	10-SEP-12
70002	05-OCT-12
70001	05-OCT-12
70003	10-OCT-12
70010	10-OCT-12
Download CSV
12 rows selected.
Statement 24
select order_no, purchase_amount from orders order by purchase_amount DESC
ORDER_NO	PURCHASE_AMOUNT
70008	5760
70013	3045.6
70003	2480.4
70005	2400.6
70010	1983.43
70007	948.5
70009	270.65
70012	250.45
70001	150.5
70004	110.5
70011	75.29
70002	65.26
Download CSV
12 rows selected.
Statement 25
select * from orders where purchase_amount < 500
ORDER_NO	PURCHASE_AMOUNT	ORDER_DATE	CUSTOMER_ID	SALESMAN_ID
70001	150.5	05-OCT-12	3005	5002
70009	270.65	10-SEP-12	3001	5005
70002	65.26	05-OCT-12	3002	5001
70004	110.5	17-AUG-12	3009	5003
70012	250.45	27-JUN-12	3008	5002
70011	75.29	17-AUG-12	3003	5007
Download CSV
6 rows selected.
Statement 26
select * from orders where purchase_amount between 1000 and 2000
ORDER_NO	PURCHASE_AMOUNT	ORDER_DATE	CUSTOMER_ID	SALESMAN_ID
70010	1983.43	10-OCT-12	3004	5006
Download CSV
Statement 27
ACTIVITY 7 
Invalid statement
Statement 28
Solution queries: 
Invalid statement
Statement 29
select SUM(purchase_amount) AS "Total sum" from orders
Total sum
17541.18
Download CSV
Statement 30
select AVG(purchase_amount) AS "Average" from orders
Average
1461.765
Download CSV
Statement 31
select MAX(purchase_amount) AS "Maximum" from orders
Maximum
5760
Download CSV
Statement 32
select MIN(purchase_amount) AS "Minumum" from orders
Minumum
65.26
Download CSV
Statement 33
select COUNT(distinct salesman_id) AS "Total count" from orders
Total count
6
Download CSV
Statement 34
select SUM(purchase_amount) AS "Total sum" from orders
Total sum
17541.18
Download CSV
Statement 35
select AVG(purchase_amount) AS "Average" from orders
Average
1461.765
Download CSV
Statement 36
select SUM(purchase_amount) AS "Total sum" from orders
Total sum
17541.18
Download CSV
Statement 37
select AVG(purchase_amount) AS "Average" from orders
Average
1461.765
Download CSV
Statement 38
select MAX(purchase_amount) AS "Maximum" from orders
Maximum
5760
Download CSV
Statement 39
select MIN(purchase_amount) AS "Minumum" from orders
Minumum
65.26
Download CSV
Statement 40
select COUNT(distinct salesman_id) AS "Total count" from orders
Total count
6
Download CSV
Statement 41
SELECT customer_id, MAX(purchase_amount) AS "Max Amount" FROM orders GROUP BY customer_id
CUSTOMER_ID	Max Amount
3009	2480.4
3005	948.5
3002	5760
3004	1983.43
3003	75.29
3008	250.45
3001	270.65
3007	2400.6
Download CSV
8 rows selected.
Statement 42
SELECT salesman_id, order_date, MAX(purchase_amount) AS "Max Amount" FROM orders  
WHERE order_date=To_DATE('2012/08/17', 'YYYY/MM/DD') GROUP BY salesman_id, order_date
SALESMAN_ID	ORDER_DATE	Max Amount
5003	17-AUG-12	110.5
5007	17-AUG-12	75.29
Download CSV
2 rows selected.
Statement 43
SELECT customer_id, order_date, MAX(purchase_amount) AS "Max Amount" FROM orders 
GROUP BY customer_id, order_date 
HAVING MAX(purchase_amount) IN(2030, 3450, 5760, 6000)
CUSTOMER_ID	ORDER_DATE	Max Amount
3002	15-AUG-12	5760
Download CSV
Statement 44
create table customers ( 
    customer_id int primary key, customer_name varchar(32), 
    city varchar(20), grade int, salesman_id int)
Table created.
Statement 45
INSERT ALL 
    INTO customers VALUES (3002, 'Nick Rimando', 'New York', 100, 5001) 
    INTO customers VALUES (3007, 'Brad Davis', 'New York', 200, 5001) 
    INTO customers VALUES (3005, 'Graham Zusi', 'California', 200, 5002) 
    INTO customers VALUES (3008, 'Julian Green', 'London', 300, 5002) 
    INTO customers VALUES (3004, 'Fabian Johnson', 'Paris', 300, 5006) 
    INTO customers VALUES (3009, 'Geoff Cameron', 'Berlin', 100, 5003) 
    INTO customers VALUES (3003, 'Jozy Altidor', 'Moscow', 200, 5007) 
    INTO customers VALUES (3001, 'Brad Guzan', 'London', 300, 5005) 
SELECT 1 FROM DUAL
8 row(s) inserted.
Statement 46
SELECT a.customer_name AS "Customer Name", a.city, b.name AS "Salesman", b.commission FROM customers a  
INNER JOIN salesman b ON a.salesman_id=b.salesman_id
ORA-00904: "B"."NAME": invalid identifier
Statement 47
SELECT a.customer_name AS "Customer Name", a.city, b.name AS "Salesman", b.commission FROM customers a  
INNER JOIN salesman b ON a.salesman_id=b.salesman_id
ORA-00904: "B"."NAME": invalid identifier
Statement 48
SELECT a.customer_name AS "Customer Name", a.city, b.salesman_name AS "Salesman", b.commission FROM customers a  
INNER JOIN salesman b ON a.salesman_id=b.salesman_id
Customer Name	CITY	Salesman	COMMISSION
Graham Zusi	California	Nail Knite	13
Julian Green	London	Nail Knite	13
Fabian Johnson	Paris	Pierre	14
Geoff Cameron	Berlin	Lauson Hen	12
Jozy Altidor	Moscow	Paul Adam	13
Brad Guzan	London	Pit Alex	11
Download CSV
6 rows selected.
Statement 49
SELECT a.customer_name, a.city, a.grade, b.saleman_name AS "Salesman", b.city FROM customers a  
LEFT OUTER JOIN salesman b ON a.salesman_id=b.salesman_id WHERE a.grade<300  
ORDER BY a.customer_id
ORA-00904: "B"."CITY": invalid identifier
Statement 50
SELECT a.customer_name, a.city, a.grade, b.saleman_name AS "Salesman", b.salesman_city FROM customers a  
LEFT OUTER JOIN salesman b ON a.salesman_id=b.salesman_id WHERE a.grade<300  
ORDER BY a.customer_id
ORA-00904: "B"."SALEMAN_NAME": invalid identifier
Statement 51
SELECT a.customer_name, a.city, a.grade, b.salesman_name AS "Salesman", b.salesman_city FROM customers a  
LEFT OUTER JOIN salesman b ON a.salesman_id=b.salesman_id WHERE a.grade<300  
ORDER BY a.customer_id
CUSTOMER_NAME	CITY	GRADE	Salesman	SALESMAN_CITY
Nick Rimando	New York	100	-	-
Jozy Altidor	Moscow	200	Paul Adam	Rome
Graham Zusi	California	200	Nail Knite	Paris
Brad Davis	New York	200	-	-
Geoff Cameron	Berlin	100	Lauson Hen	San Jose